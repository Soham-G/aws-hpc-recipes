AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to set up observability infrastructure for PCS using Amazon Managed Prometheus and self-hosted Grafana on EC2'

Parameters:
  GrafanaInstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for Grafana server
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
  
  GrafanaAdminUsername:
    Type: String
    Default: admin
    Description: Username for the Grafana admin user
  
  GrafanaAdminPassword:
    Type: String
    NoEcho: true
    Description: Password for the Grafana admin user
    MinLength: 8
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the Grafana instance
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the Grafana instance will be deployed
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet where the Grafana instance will be deployed (choose a public subnet to access the dashboard)
  
  ClientIpCidr:
    Type: String
    Description: CIDR block for client IP address to allow access to Grafana (e.g., 192.168.1.1/32)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: 45.12.242.84/32
  
  PrometheusName:
    Type: String
    Default: pcs-prometheus
    Description: Name for the Amazon Managed Prometheus workspace
  
  RetentionInDays:
    Type: Number
    Default: 30
    Description: Number of days to retain metrics in Amazon Managed Prometheus
    MinValue: 1
    MaxValue: 150
  
  CreateCloudWatchDashboard:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to create a CloudWatch dashboard for PCS metrics
    
  UseHTTPS:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to configure HTTPS with a self-signed certificate

Resources:
  # Amazon Managed Prometheus Workspace
  PrometheusWorkspace:
    Type: 'AWS::APS::Workspace'
    Properties:
      Alias: !Ref PrometheusName
      Tags:
        - Key: Name
          Value: !Ref PrometheusName
        - Key: Purpose
          Value: PCS-Observability

  # Security Group for Grafana EC2 instance
  GrafanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Grafana server
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ClientIpCidr
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref ClientIpCidr
          Description: Grafana web interface
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ClientIpCidr
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ClientIpCidr
          Description: HTTP access
      Tags:
        - Key: Name
          Value: grafana-security-group
        - Key: Purpose
          Value: PCS-Observability

  # IAM Role for Grafana EC2 instance
  GrafanaInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonPrometheusQueryAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess'
      Path: /
      Tags:
        - Key: Purpose
          Value: PCS-Observability

  # IAM Instance Profile for Grafana EC2 instance
  GrafanaInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref GrafanaInstanceRole

  # Grafana EC2 Instance
  GrafanaInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref GrafanaInstanceType
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !GetAtt GrafanaSecurityGroup.GroupId
      IamInstanceProfile: !Ref GrafanaInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update system and install prerequisites
          echo "Updating system packages..."
          for i in {1..3}; do
            yum update -y && break
            echo "Update failed, retrying in 5 seconds..."
            sleep 5
          done
          
          # Install required packages
          echo "Installing required packages..."
          for i in {1..3}; do
            yum install -y curl wget jq && break
            echo "Package installation failed, retrying in 5 seconds..."
            sleep 5
          done
          
          # Install Grafana with retry mechanism
          cat > /etc/yum.repos.d/grafana.repo << EOF
          [grafana]
          name=grafana
          baseurl=https://packages.grafana.com/oss/rpm
          repo_gpgcheck=1
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.grafana.com/gpg.key
          sslverify=1
          sslcacert=/etc/pki/tls/certs/ca-bundle.crt
          EOF
          
          # Wait for any existing yum processes to complete
          echo "Waiting for any existing yum processes to complete..."
          for i in {1..30}; do
            if ! pgrep -x yum > /dev/null; then
              break
            fi
            echo "Waiting for yum process to finish (attempt $i/30)..."
            sleep 10
          done
          
          # Clean any stale locks if they exist
          if [ -f /var/lib/rpm/.rpm.lock ]; then
            echo "Removing stale RPM lock..."
            rm -f /var/lib/rpm/.rpm.lock
          fi
          
          # Try to install Grafana with retries
          echo "Installing Grafana..."
          for i in {1..5}; do
            echo "Installation attempt $i/5"
            yum clean all
            yum install -y grafana && break
            echo "Installation failed, retrying in 10 seconds..."
            sleep 10
          done
          
          # Verify installation
          if rpm -q grafana > /dev/null; then
            echo "Grafana installation complete. Checking installation..."
            rpm -qa | grep grafana
            ls -la /etc/grafana/
            ls -la /usr/share/grafana/
          else
            echo "ERROR: Grafana installation failed after multiple attempts"
            exit 1
          fi
          
          # Set up HTTPS with self-signed certificate if enabled
          USE_HTTPS="${UseHTTPS}"
          
          if [ "$USE_HTTPS" = "true" ]; then
            echo "Setting up HTTPS with self-signed certificate"
            
            # Create directory for Grafana certificates
            mkdir -p /etc/grafana/ssl
            
            # Generate self-signed certificate
            echo "Generating self-signed certificate..."
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/grafana/ssl/grafana.key \
              -out /etc/grafana/ssl/grafana.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)"
            
            # Set proper permissions
            chown -R grafana:grafana /etc/grafana/ssl
            chmod 400 /etc/grafana/ssl/grafana.key
            
            # Configure Grafana for HTTPS
            cat > /etc/grafana/grafana.ini << EOF
          [security]
          admin_user = ${GrafanaAdminUsername}
          admin_password = ${GrafanaAdminPassword}
          
          [server]
          protocol = https
          http_port = 3000
          domain = $(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
          cert_file = /etc/grafana/ssl/grafana.crt
          cert_key = /etc/grafana/ssl/grafana.key
          
          [auth.anonymous]
          enabled = false
          EOF
            
            echo "Self-signed certificate created successfully"
          else
            # Configure Grafana for HTTP
            cat > /etc/grafana/grafana.ini << EOF
          [security]
          admin_user = ${GrafanaAdminUsername}
          admin_password = ${GrafanaAdminPassword}
          
          [server]
          http_port = 3000
          domain = $(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
          
          [auth.anonymous]
          enabled = false
          EOF
          fi
          
          # Configure Prometheus data source
          mkdir -p /etc/grafana/provisioning/datasources/
          cat > /etc/grafana/provisioning/datasources/prometheus.yaml << EOF
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: ${PrometheusWorkspace.PrometheusEndpoint}
              isDefault: true
              jsonData:
                sigV4Auth: true
                sigV4AuthType: default
                sigV4Region: ${AWS::Region}
              version: 1
              editable: true
          EOF
          
          # Configure CloudWatch data source
          cat > /etc/grafana/provisioning/datasources/cloudwatch.yaml << EOF
          apiVersion: 1
          datasources:
            - name: CloudWatch
              type: cloudwatch
              access: proxy
              jsonData:
                authType: default
                defaultRegion: ${AWS::Region}
              version: 1
              editable: true
          EOF
          
          # Start and enable Grafana with retry mechanism
          systemctl daemon-reload
          echo "Starting Grafana server..."
          systemctl enable grafana-server
          
          # Try to start Grafana with retries
          for i in {1..5}; do
            echo "Starting Grafana attempt $i/5"
            systemctl start grafana-server && {
              echo "Grafana server started successfully"
              break
            }
            
            echo "Failed to start Grafana server. Checking logs..."
            systemctl status grafana-server
            journalctl -xeu grafana-server --no-pager | tail -n 50
            
            if [ $i -lt 5 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            else
              echo "ERROR: Failed to start Grafana server after multiple attempts"
              # Don't exit here, let CloudFormation handle the failure
            fi
          done
          
          # Signal completion
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource GrafanaInstance --region ${AWS::Region}
      
      Tags:
        - Key: Name
          Value: grafana-server
        - Key: Purpose
          Value: PCS-Observability
      

  # IAM Role for Prometheus Scraping
  PrometheusScraperRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess'
      Path: /
      Tags:
        - Key: Purpose
          Value: PCS-Observability

  # IAM Instance Profile for EC2 instances
  PrometheusScraperInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref PrometheusScraperRole

  # CloudWatch Dashboard for PCS metrics (optional)
  CloudWatchDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Condition: CreateDashboard
    Properties:
      DashboardName: !Sub 'PCS-Metrics-Dashboard-${AWS::StackName}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ParallelCluster", "CPUUtilization", "ClusterName", "*" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "PCS Cluster CPU Utilization"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ParallelCluster", "MemoryUtilization", "ClusterName", "*" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "PCS Cluster Memory Utilization"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ParallelCluster", "JobsPending", "ClusterName", "*" ],
                  [ ".", "JobsRunning", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "PCS Cluster Job Status"
              }
            }
          ]
        }

  # SSM Parameter to store Prometheus endpoint
  PrometheusEndpointParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/pcs/observability/${PrometheusName}/endpoint'
      Type: String
      Value: !GetAtt PrometheusWorkspace.PrometheusEndpoint
      Description: 'Amazon Managed Prometheus endpoint for PCS'
      Tags:
        Purpose: PCS-Observability

  # SSM Parameter to store Grafana endpoint
  GrafanaEndpointParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: !Sub '/pcs/observability/grafana/endpoint'
      Type: String
      Value: !If 
        - ConfigureHTTPS
        - !Sub 'https://${GrafanaInstance.PublicDnsName}'
        - !Sub 'http://${GrafanaInstance.PublicDnsName}:3000'
      Description: 'Self-hosted Grafana endpoint for PCS'
      Tags:
        Purpose: PCS-Observability

Conditions:
  CreateDashboard: !Equals [!Ref CreateCloudWatchDashboard, 'true']
  ConfigureHTTPS: !Equals [!Ref UseHTTPS, 'true']

Outputs:
  PrometheusWorkspaceId:
    Description: 'Amazon Managed Prometheus Workspace ID'
    Value: !GetAtt PrometheusWorkspace.WorkspaceId
    Export:
      Name: !Sub '${AWS::StackName}-PrometheusWorkspaceId'
  
  PrometheusEndpoint:
    Description: 'Amazon Managed Prometheus Endpoint'
    Value: !GetAtt PrometheusWorkspace.PrometheusEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-PrometheusEndpoint'
  
  GrafanaInstanceId:
    Description: 'Grafana EC2 Instance ID'
    Value: !Ref GrafanaInstance
    Export:
      Name: !Sub '${AWS::StackName}-GrafanaInstanceId'
  
  GrafanaPublicDNS:
    Description: 'Grafana Public DNS'
    Value: !GetAtt GrafanaInstance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-GrafanaPublicDNS'
  
  GrafanaURL:
    Description: 'Grafana URL'
    Value: !If 
      - ConfigureHTTPS
      - !Sub 'https://${GrafanaInstance.PublicDnsName}:3000'
      - !Sub 'http://${GrafanaInstance.PublicDnsName}:3000'
    Export:
      Name: !Sub '${AWS::StackName}-GrafanaURL'
